replicate(4, rand_gruop(), simplify = FALSE) %>%
cr_share %>%
cr_vec
# pop <- rand_subgruops(3, rpois(1, 4), rpois(1, 1E2), 3)
# rep_df <- build_df(pop)
# g1 <- rand_gruop()
# g2 <- rand_gruop()
# g3 <- rand_gruop()
replicate(4, rand_gruop(), simplify = FALSE) %>%
cr_share %>% cr_vec %>% table
replicate(4, rand_gruop(), simplify = FALSE) %>%
cr_share %>% cr_vec
# pop <- rand_subgruops(3, rpois(1, 4), rpois(1, 1E2), 3)
# rep_df <- build_df(pop)
# g1 <- rand_gruop()
# g2 <- rand_gruop()
# g3 <- rand_gruop()
replicate(4, rand_gruop(), simplify = FALSE) %>%
cr_share %>% cr_vec %>% table
# pop <- rand_subgruops(3, rpois(1, 4), rpois(1, 1E2), 3)
# rep_df <- build_df(pop)
# g1 <- rand_gruop()
# g2 <- rand_gruop()
# g3 <- rand_gruop()
replicate(4, rand_gruop(), simplify = FALSE) %>%
cr_share %>% cr_vec
cr_overlap <- function(subpopulations, func=intersect_percentage) { # TODO: overlap as number of intersect. not precentile
cross(subpopulations) %>%
lapply(setNames, names(formals(func))) %>%
invoke_map(.f = func) %>%
array(dim = c(3,3), dimnames = lapply(subpopulations, names))
}
# aa_vec1 <- rand_rep_vec("aa", 10000, 5)
# aa_vec2 <- rand_rep_vec("aa", 10000, 5)
#
# intersect_percentage(aa_vec1, aa_vec2)
# cr_simmilarity
intersect_percentage <- function(x, y) { # overlap coefficient
length(intersect(x, y)) / min(length(x), length(y))
}
# TODO: morisita
# cr_dissimilarity
jaccard_index <- function(x, y){
length(intersect(x, y)) / length(union(x, y))
}
cr_overlap <- function(subpopulations, func=intersect_percentage) { # TODO: overlap as number of intersect. not precentile
subpopulations %>%
cross() %>%
lapply(setNames, names(formals(func))) %>%
invoke_map(.f = func) %>%
array(dim = c(3,3), dimnames = lapply(subpopulations, names))
}
# aa_vec1 <- rand_rep_vec("aa", 10000, 5)
# aa_vec2 <- rand_rep_vec("aa", 10000, 5)
#
# intersect_percentage(aa_vec1, aa_vec2)
# cr_simmilarity
intersect_percentage <- function(x, y) { # overlap coefficient
length(intersect(x, y)) / min(length(x), length(y))
}
# cr_dissimilarity
jaccard_index <- function(x, y){
length(intersect(x, y)) / length(union(x, y))
}
rand_subgruops()
build_df(g1, g2, g3)
df <- build_df(g1, g2, g3)
cr_list(df)
cr_list(df) %>% cr_overlap
names_g <- c("Cancer", "Pre-Cancer", "Control")
df1 <- build_df(rand_gruop(), rand_gruop(), rand_gruop())
df2 <- build_df(rand_gruop(), rand_gruop(), rand_gruop())
df3 <- build_df(rand_gruop(), rand_gruop(), rand_gruop())
df1
cr_list(df1)
cr_list(df1)
df1 <- build_df(rand_gruop(1000), rand_gruop(), rand_gruop())
cr_list(df1)
cr_overlap <- function(subpopulations, func=intersect_percentage) { # TODO: overlap as number of intersect. not percentile
cross(subpopulations) %>%
lapply(setNames, names(formals(func))) %>%
invoke_map(.f = func) %>%
array(dim = c(3,3), dimnames = lapply(subpopulations, names))
}
cr_list(df1) %>% cr_overlap
?setNames
populations <- setNames(list(cr1, cr2), names_g[1:2])
populations
c1 <- cr_list(df1)
df1 <- build_df(rand_gruop(1000), rand_gruop(1000), rand_gruop(1000))
df2 <- build_df(rand_gruop(1000), rand_gruop(1000), rand_gruop(1000))
df3 <- build_df(rand_gruop(1000), rand_gruop(1000), rand_gruop(1000))
c1 <- cr_list(df1)
c3 <- cr_list(df2)
c3 <- cr_list(df3)
df2
populations <- setNames(list(cr1, cr2), names_g[1:2])
names_g <- c("Cancer", "Pre-Cancer", "Control")
populations <- setNames(list(cr1, cr2), names_g[1:2])
c1 <- cr_list(df1)
c3 <- cr_list(df2)
c2 <- cr_list(df2)
c3 <- cr_list(df3)
populations <- setNames(list(cr1, cr2, cr3), names_g)
cr1 <- cr_list(df1)
cr2 <- cr_list(df2)
cr3 <- cr_list(df3)
names_g <- c("Cancer", "Pre-Cancer", "Control")
populations <- setNames(list(cr1, cr2, cr3), names_g)
populations
cr_overlap(populations)
cr_overlap(populations[1:2])
cr_overlap(populations[1:2]) %>% combn(2, cr_overlap, simplify = TRUE)
combn(2, 1:3, simplify = TRUE)
combn(1:3, 2, simplify = TRUE)
combn(1:3, 2, simplify = FALSE)
list(mouse, monkey, human)
populations <- list(mouse, monkey, human) %>%
setNames(c("Mouse", "Monkey", "Human"))
mouse <- list(Cancer=rand_gruop(1000), Control=rand_gruop(1000)) %>% build_df() %>% cr_list
monkey <- list(Cancer=rand_gruop(1000), Control=rand_gruop(1000)) %>% build_df() %>% cr_list
human <- list(Cancer=rand_gruop(1000), Control=rand_gruop(1000)) %>% build_df() %>% cr_list
populations <- list(mouse, monkey, human) %>%
setNames(c("Mouse", "Monkey", "Human"))
combn(1:3, 2, simplify = FALSE)
populations %>% combn(2, simplify = FALSE)
populations %>% combn(2, FUN = length, simplify = FALSE)
populations %>% combn(2, FUN = lengths, simplify = FALSE)
populations %>% combn(2, FUN = cr_overlap, simplify = FALSE)
populations %>%
combn(2, cr_overlap)
populations %>%
combn(2, cr_overlap, FALSE)
populations %>%
combn(2, cr_overlap, FALSE) %>% unlist()
populations %>%
combn(2, cr_overlap, FALSE) %>% unlist(recursive = FALSE)
populations %>%
combn(2, cr_overlap, FALSE)
populations %>%
combn(2, cr_overlap, FALSE) %>%
map(as.data.frame)
populations %>%
combn(2, cr_overlap, FALSE) %>%
map(as.data.frame.array)
populations %>%
combn(2, cr_overlap, FALSE) %>%
map(melt)
populations %>%
combn(2, cr_overlap, FALSE)
populations %>%
combn(2, cr_overlap, FALSE) %>%
map(class)
mat_list <- populations %>%
combn(2, cr_overlap, FALSE)
mat_list[[q]]
mat_list[[1]]
mat_list[[1]] %>% as.data.frame()
mat_list[[1]] %>% melt()
library(reshape2)
mat_list[[1]] %>% melt()
mat_list %>% melt()
mat_list[[1]] %>% melt()
mat_list[[1]] %>% melt(check.names = FALSE)
mat_list[[1]] %>% melt(check.names = TRUE)
mat_list[[1]] %>% as.list()
mat_list[[1]] %>% as.list.data.frame()
melt(airquality, id=c("month", "day"))
mat_list[[1]] %>% melt(id=c("private", "exclusive"))
ChickWeight
mat_list[[1]] %>% melt(id=1:3)
mat_list[[1]] %>% as.data.frame() %>%  melt()
mat_list[[1]] %>% as.data.frame() %>%  melt(id=1:3)
mat_list[[1]] %>% as.data.frame() %>%  melt(id=1:2)
mat_list[[1]] %>% melt(id=1)
mat_list[[1]] %>% melt(id=1) %>% select(1:3)
mat_list[[1]] %>% melt(id=1:2)
mat_list
mat_list[[1]] %>% melt()
lapply(mat_list, melt)
mat_list[[1]] %>% as.data.frame(row.names = NULL)
mat_list[[1]] %>% as.data.frame(row.names = NULL) %>% melt()
mat_list[[1]] %>% as.data.frame.matrix(row.names = NULL)
mat_list[[1]] %>% as.data.frame.matrix(row.names = NULL) %>% melt()
mat_list[[1]] %>% as.data.frame.matrix() %>% melt(row.names = NULL)
mat_list[[1]] %>% as.matrix.data.frame(rownames.force = FALSE) %>% melt()
mat_list[[1]] %>% as.matrix.data.frame(rownames.force = FALSE)
mat_list[[1]] %>% as.matrix.data.frame()
mat_list[[1]] %>% as.matrix.data.frame()
mat_list[[1]]
mat_list[[1]] %>% as.matrix.data.frame()
mat_list[[1]] %>% as.matrix.data.frame() %>% melt()
?as.matrix.data.frame
mat_list[[1]] %>% as.matrix.data.frame(dimnames=dimnames(.)) %>% melt()
mat_list[[1]] %>% as.matrix.data.frame(dimnames=dimnames(.))
mat_list[[1]] %>% as.matrix.data.frame()
mat_list[[1]] %>% as.matrix.data.frame(rownames.force = NULL)
mat_list[[1]] %>% as.matrix.data.frame(dimnames=list(dimnames(.)))
cross(subpopulations) %>%
lapply(setNames, names(formals(func))) %>%
invoke_map(.f = func) %>%
array(dim = c(3,3), dimnames = lapply(subpopulations, names))
mat_list[[1]] %>% list(dimnames(.))
mat_list[[1]] %>% lappy(dimnames(.))
mat_list[[1]] %>% lappy(dimnames)
mat_list[[1]] %>% lapply(dimnames)
mat_list %>% lapply(dimnames)
mat_list %>% lapply(naems)
mat_list %>% lapply(names)
mat_list %>% lapply(dims)
mat_list %>% lapply(dim)
mat_list %>% lapply(melt)
mat_list %>% lapply(. %>% as.data.frame)
mat_list %>% lapply(. %>% as.data.frame(row.names = NULL))
mat_list %>% lapply(. %>% as.data.frame(row.names = NA))
mat_list %>% lapply(. %>% as.data.frame(row.names = NA) %>% melt)
mat_list %>% lapply(. %>% as.data.frame(com.names = NA) %>% melt)
mat_list %>% lapply(. %>% as.data.frame(row.names = NA))
mat_list %>% lapply(. %>% as.data.frame(row.names = NA) %>% melt(1))
mat_list %>% lapply(. %>% as.data.frame(row.names = NA) %>% melt(id=1))
mat_list %>% lapply(. %>% as.data.frame(row.names = NA) %>% melt(.id=1))
mat_list %>% lapply(. %>% as.data.frame(row.names = NA) %>% melt(.id=1:2))
mat_list %>% lapply(. %>% as.data.frame(column.names = NA) %>% melt(.id=1:2))
mat_list %>% lapply(. %>% as.data.frame(row.names = NULL) %>% melt(.id=1:2))
# %>% melt()
mat_list[[1]]
# %>% melt()
mat_list[[1]] %>% as.list
# %>% melt()
mat_list[[1]]["private"] %>% as.list
# %>% melt()
mat_list[[1]]["private",] %>% as.list
# %>% melt()
mat_list[[1]]["private" ,] %>% as.list
mat_list[[1]]["private",]
mat_list[[1]] %>% gather
library(tidyr)
mat_list[[1]] %>% gather
mat_list[[1]] %>% as.data.frame() %>% gather
mat_list[[1]] %>% as.data.frame() %>% gather(convert = TRUE)
mat_list[[1]] %>% melt
mat_list[[1]] %>% pivot_longer(cols = 1:2)
mat_list[[1]] %>% as.data.frame() %>% pivot_longer(cols = 1:2)
mat_list[[1]] %>% as.data.frame() %>% pivot_longer(cols = 1)
mat_list
?melt
mat_list[[1]] %>% as.data.frame() %>% melt(varnames=c("private","exclusive","inclusive"))
mat_list[[1]]
mat_list[[1]] %$% private
mat_list[[1]] %>% as.data.frame() %$% private
mat_list[[1]] %>% as.data.frame() %$% rbind(private)
mat_list[[1]] %>% as.data.frame() %$% rbind(!!!private)
mat_list[[1]] %>% as.data.frame() %$% rbind(private)
mat_list[[1]] %>% as.data.frame() %$% rbind(private, exclusive)
mat_list[[1]] %>% as.data.frame() %$% rbind(private)
mat_list[[1]] %>% as.data.frame() %$% cbind(private)
mat_list[[1]] %>% as.data.frame() %$% cbind(private, public)
mat_list[[1]] %>% as.data.frame() %$% cbind(private, exclusive)
mat_list[[1]] %>% as.data.frame() %$% rbind(cbind(private, exclusive), cbind(private, inclusive), cbind(exclusive, inclusive))
mat_list[[1]] %>% %$% rbind(cbind(private, exclusive), cbind(private, inclusive), cbind(exclusive, inclusive))
mat_list[[1]]%$% rbind(cbind(private, exclusive), cbind(private, inclusive), cbind(exclusive, inclusive))
mat_list[[1]] %>% as.data.frame() %$% rbind(cbind(private, exclusive), cbind(private, inclusive), cbind(exclusive, inclusive))
# %>% melt()
f <- . %>%
mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive))
f(1)
f(2)
map_dfr(seq_along(mat_list), f)
mat_list %>% dimnames()
mat_list %>% dimnames(1)
mat_list[[1]] %>% dimnames()
mat_list[[1]] %>% dimnames() %>% names
mat_list[[1]] %>% dimnames() %>% names()[1]
mat_list[[1]] %>% dimnames() %>% names()
# %>% melt()
f <- . %>%
mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive),
cbind(!!!dimnames(.)))
map_dfr(seq_along(mat_list), f, )
map(seq_along(mat_list), f, )
mat_list[[1]]
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive),
cbind(!!!dimnames(.)))
mat_list %>% map_df %>% map(f)
mat_list %>% map_df %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive),
cbind(!!!dimnames(.)))
mat_list %>% map_df %>% map(.f = f)
mat_list %>% map(.f = f)
# %>% melt()
f <- ... %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive),
cbind(!!!dimnames(.)))
mat_list %>% map(.f = f)
# %>% melt()
f <- ... %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive),
cbind(!!!dimnames(.)))
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive),
cbind(!!!dimnames(.)))
mat_list %>% map(.f = f)
cr_list <- function(rep_gruops) {
rep_gruops %>% cr_share %>%
factor_cr %>% split(x = names(.))
}
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive),
cbind(dimnames(.)))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive), cbind(names(.)))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive), names(.))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)) %>% cbind(names(.))
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)) %>% cbind(names(.)[1])
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), names(.)) %>% cbind(names(.)[1])
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.)) %>% cbind(names(.)[1])
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.)[1])
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
rbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.), deparse.level = 0)
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), levels(dimnames()))
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), levels(dimnames()))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), levels(dimnames(.)))
mat_list %>% map(.f = f)
cr_list <- function(rep_gruops) {
rep_gruops %>% cr_share %>%
factor_cr %>% split(x = names(.))
}
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), labels(dimnames(.)))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), as.character(dimnames(.)))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), as.character(names(.)))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), names(dimnames(.)))
mat_list %>% map(.f = f)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.))
mat_list %>% map(.f = f)
source("~/GitHub/crtcr/R/cr.R", echo=TRUE)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.) %>% names %>% as.character())
mat_list %>% map(.f = f)
share_level(rep_list)
