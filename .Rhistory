cbind(exclusive, inclusive)), dimnames(.))
mat_list %>% map(.f = f)
source("~/GitHub/crtcr/R/cr.R", echo=TRUE)
# %>% melt()
f <- . %>%
# mat_list[[.]] %>%
as.data.frame() %$%
cbind(rbind(cbind(private, exclusive),
cbind(private, inclusive),
cbind(exclusive, inclusive)), dimnames(.) %>% names %>% as.character())
mat_list %>% map(.f = f)
share_level(rep_list)
# whole numbers
library("magrittr")
library("dplyr")
f <- function(x) {
# if(!any(i <- (x >= min_freq & !is.na(x)), na.rm = TRUE)) return(NA)
# any(i <- (x >= min_freq & !is.na(x)), na.rm = TRUE)
# i <- x >= min_freq & !is.na(x)
i <- x >= min_freq
is.not.empty <- any(i, na.rm = TRUE)
is.public <- sum(x[i], na.rm = TRUE) >= public_min # FALSE is private
is.exclusive <- sum(i, na.rm = TRUE) <= exclusive_max # FALSE is inclusive
dplyr::case_when(
is.public & is.exclusive ~ "exclusive",
is.public ~ "inclusive",
is.not.empty ~ "private",
TRUE ~ NA_character_
)
}
f <- function(x) {
# if(!any(i <- (x >= min_freq & !is.na(x)), na.rm = TRUE)) return(NA)
# any(i <- (x >= min_freq & !is.na(x)), na.rm = TRUE)
# i <- x >= min_freq & !is.na(x)
i <- x >= min_freq
is.not.empty <- any(i, na.rm = TRUE)
is.public <- sum(x[i], na.rm = TRUE) >= public_min # FALSE is private
is.exclusive <- sum(i, na.rm = TRUE) <= exclusive_max # FALSE is inclusive
case_when(
# dplyr::case_when(
is.public & is.exclusive ~ "exclusive",
is.public ~ "inclusive",
is.not.empty ~ "private",
TRUE ~ NA_character_
)
}
min_freq=2; public_min=2; exclusive_max=1
c(0,0,0,0) %>% f()
c(0,0,0,NA) %>% f()
c(NA,NA,NA,NA) %>% f()
c(0,1,0,0) %>% f()
c(0,1,0,NA) %>% f()
c(NA,1,NA,NA) %>% f()
c(0,1,0,1) %>% f()
c(NA,1,NA,1) %>% f()
c(0,0,0,2) %>% f()
c(0,NA,0,2) %>% f()
c(NA,NA,NA,2) %>% f()
c(0,0,1,2) %>% f()
f <- function(x) {
# if(!any(i <- (x >= min_freq & !is.na(x)), na.rm = TRUE)) return(NA)
# any(i <- (x >= min_freq & !is.na(x)), na.rm = TRUE)
# i <- x >= min_freq & !is.na(x)
i <- x >= min_freq
is.not.empty <- any(i, na.rm = TRUE)
is.public <- sum(x[i], na.rm = TRUE) >= public_min # FALSE is private
is.exclusive <- sum(i, na.rm = TRUE) <= exclusive_max # FALSE is inclusive
case_when(
# dplyr::case_when(
is.public & is.exclusive ~ "exclusive",
is.public ~ "inclusive",
is.not.empty ~ "private",
TRUE ~ NA_character_
)
}
min_freq=1; public_min=2; exclusive_max=1
c(0,0,0,0) %>% f()
c(0,0,0,NA) %>% f()
c(NA,NA,NA,NA) %>% f()
c(0,1,0,0) %>% f()
c(0,1,0,NA) %>% f()
c(NA,1,NA,NA) %>% f()
c(0,1,0,1) %>% f()
c(NA,1,NA,1) %>% f()
c(0,0,0,2) %>% f()
c(0,NA,0,2) %>% f()
c(NA,NA,NA,2) %>% f()
c(0,0,1,2) %>% f()
devtools::load_all(".")
library(roxygen2)
#' @return character vector
#' @export
#'
#' @examples
#'
#' df_lists <- replicate(4, rand_group(), FALSE)
#' rand_df <- group_join(df_lists)
#' tbl <- share_table(rand_df, "clonotype", "group", "rep_id")
#' cr_class(tbl)
#'
cr_class <- function(group_count, margin=1, min_freq=1, public_min=2, exclusive_max=1) {
# compute_type <- function(x) {
#   # public clonotype    inclusive clonotype
#   i <- x >= min_freq
#   # can't be private    multiple shared samples
#   # (sum(x[i]) >= public_min) + (sum(i) <= exclusive_max)
#   (p <- sum(x[i]) >= public_min) + (p & sum(i) <= exclusive_max)
#   # private = 0 | exclusive = 1 | inclusive = 2
# }
# cr_index <-
if (is.vector(group_count)) # checking whether the input is a vector.
# If it is, then it’s a simple count and we can just use the compute_type function.
cr_freq_class(group_count, min_freq, public_min, exclusive_max)
# If the input is not a vector, then we need to check whether the object has dimensions (it’s a array / matrix / data frame).
else if (!is.null(dim(group_count)))
# If it is, then we need to apply the compute_type function to each row.
apply(group_count, margin, cr_freq_class, min_freq, public_min, exclusive_max)
# input is not a vector, matrix, or data frame, then we need to stop because we don’t know how to handle it.
else stop("")
# dplyr::case_when(
#   # checking if the cr_index is equal to 2.
#   cr_index==2 ~ "exclusive", # If so, it returns the string “exclusive”.
#   # checking if the cr_index is equal to 1.
#   cr_index==1 ~ "inclusive", # If so, it returns the string “inclusive”.
#   # checking if the cr_index is equal to 0.
#   cr_index==0 ~ "private", # If so, it returns the string “private”.
#   # checking if the cr_index is not equal to 2, 1, or 0.
#   TRUE ~ NA_character_ # If so, it returns the string “NA”.
# )
# factor(cr_index,
#        levels = c(0, 1, 2),
#        # labels = c("private", "exclusive", "inclusive"))
#        labels = c("private", "inclusive", "exclusive"))
}
df_lists <- replicate(4, rand_group(), FALSE)
rand_df <- group_join(df_lists)
tbl <- share_table(rand_df, "clonotype", "group", "rep_id")
devtools::load_all(".")
rm(list = c("cr_class"))
devtools::load_all(".")
tbl[1,]
tbl[1,] %>% cr_class
tbl[1:10,] %>% cr_class
sample_n(tbl, 10)
sample.int(10, 3)
sample.int(nrow(tbl), 3)
sample.int(nrow(tbl), 5)
tbl[sample.int(nrow(tbl), 5),]
head(tbl, 5)
head(tbl, 5) %>% cr_class
devtools::load_all(".")
library(rlang)
?usethis::use_vignette
usethis::use_vignette("crtcr", "Fundamental understanding and practical application")
is_public(c(1, 0 , 2, 4), min_freq=3)
is_exclusive(c(1, 0 , 2, 4), gl(2,2), min_freq=2)
devtools::load_all(".")
use_import_from("dplyr", "distinct")
use_import_from("dplyr", "select")
devtools::load_all(".")
library(crtcr)
devtools::load_all(".")
is_public(c(1, 0 , 2, 4), min_freq=3)
devtools::load_all(".")
is_public(c(1, 0 , 2, 4), min_freq=3)
is_public(c(1,0,0.0), min_freq=3)
is_public(c(1,0,0,0), min_freq=3)
is_public(c(1,0,0,0), min_freq=1)
is_public(c(2,0,0,0), min_freq=1)
ifelse(o:3 > 0, 1,NA)
ifelse(0:3 > 0, 1,NA)
ifelse(0:3 > 0, 0:3 >1,NA)
ifelse(0:3 > 0, -1:3 >1,NA)
ifelse(-1:3 > 0, -1:3 >1,NA)
devtools::load_all(".")
is_public(0:3)
is_public(0:3, sub_group = TRUE)
is_public(c(0,1,0,1), sub_group = TRUE)
is_public(c(0,1,0,1), min_freq = 2, sub_group = TRUE)
is_public(c(0,1,0,1), sub_group = TRUE)
is_public(c(0,1,0,1), public_min = 3, sub_group = TRUE)
is_public(c(0,1,0,1), public_min = 3, sub_group = FALSE)
is_public(c(0,2,0,2), public_min = 3, sub_group = FALSE)
devtools::load_all(".")
is_public(c(0,2,0,2), public_min = 3, sub_group = FALSE)
is_public(c(0,2,0,2), public_min = 3)
use_r("share_level")
set.seed(10)
dat <- data.frame(grp1 = sample(c(0, 1), size = 5, replace = TRUE),
grp2 = sample(c(0, 1), size = 5, replace = TRUE),
grp3 = sample(c(0, 1), size = 5, replace = TRUE),
value = round(runif(5, min = 0, max = 10), 0) )
dat
library(dplyr)
library(tidyr)
dat %>%
pivot_longer(grp1:grp3, names_repair = 'unique') %>%
filter(value...3 == 1) %>%
group_by(name) %>%
summarise(means = mean(value...1))
dat
dat %>%
pivot_longer(grp1:grp3, names_repair = 'unique')
dat %>%
# pivot_longer(grp1:grp3, names_repair = 'unique') %>%
pivot_longer(grp1:grp3)
dat %>%
pivot_longer(grp1:grp3, names_repair = 'unique')
dat %>%
pivot_longer(grp1:grp3, names_repair = 'unique') %>%
filter(value...3 == 1)
dat %>%
pivot_longer(grp1:grp3, names_repair = 'unique') %>%
filter(value...3 == 1) %>%
group_by(name)
dat %>%
pivot_longer(grp1:grp3, names_repair = 'unique')
tibble(max = c(3, 4, 5), seq = list(1:3, 1:4, 1:5))
enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq')
tidyr::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq')
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq')
n_storms %>%
rowwise() %>%
mutate(n = list(dim(data)))
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq')
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
rowwise() %>%
mutate(n = list(dim(data)))
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
rowwise() %>%
mutate(n = list(nrow(data)))
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
mutate(n = list(nrow(data)))
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
mutate(n = list(nrow(seq)))
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
mutate(n = list(length(seq)))
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
mutate(n = list(length(seq))) %>% select(n)
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
mutate(n = list(length(seq))) %>% select(n) %>% unlist()
tibble::enframe(list('3'=1:3, '4'=1:4, '5'=1:5), 'max', 'seq') %>%
mutate(n = length(seq)) %>% select(n) %>% unlist()
starwars %>%
rowwise() %>%
mutate(n_transports = length(c(vehicles, starships)))
starwars[c(vehicles, starships)]
starwars[c("vehicles", "starships")]
starwars[c("vehicles", "starships")] %>% unlist()
rand_df %>% head()
rand_df %>% head() %>% group_by(group, rep_id) %>% n_distinct()
rand_df %>% head() %>% group_by(group, rep_id) %>% n_distinct(clonotype)
rand_df %>% head() %>% group_by(group, rep_id) %>% n_distinct("clonotype")
rand_df %>% head() %>% group_by(group, rep_id) %>% n_distinct("clone")
rand_df %>% head(1000) %>% group_by(group, rep_id) %>% n_distinct(clone)
rand_df %>% head(1000) %>% group_by(group, rep_id) %>% n_distinct("clone")
rand_df %>% head(1000) %>% group_by(group, rep_id) %>% summarise(nd = n_distinct("clone"))
rand_df %>% head(1000) %>% group_by(group, rep_id, clonotype) %>% summarise(nd = n_distinct("clone"))
rand_df %>% head(1000) %>% group_by(group, rep_id, clonotype) %>% summarise(CR_levle = n_distinct("clone"))
rand_df %>% group_by(group, rep_id, clonotype) %>% summarise(CR_levle = n_distinct("clone"))
rand_df$clonotype[1]
rand_df[rand_df$clonotype=="A",]
rand_df %>% group_by(group, rep_id, clonotype) %>% summarise(CR_levle = n_distinct("clone"))
rand_df %>% group_by(group, rep_id, clonotype) %>% summarise(CR_levle = n_distinct(clone))
rand_df %>% group_by(group, rep_id, clonotype) %>% summarise(CR_levle = n_distinct(clonotype, clone))
rand_df %>% group_by(group, rep_id, clonotype) %>% summarise(CR_levle = n())
rand_df %>% group_by(group, rep_id) %>% summarise(CR_levle = n())
rand_df %>% group_by(group, rep_id) %>% summarise(CR_levle = n_distinct(clone))
rand_df %>% group_by(group, rep_id) %>% select(clonotype, clone) %>% summarise(CR_levle = n_distinct(clone))
rand_df %>% group_by(group, rep_id) %>% select(clonotype) %>% summarise(CR_levle = n_distinct(clone))
rand_df %>% group_by(group, rep_id) %>% select(clone) %>% summarise(CR_levle = n_distinct(clone))
rand_df %>% group_by(group, rep_id, clonotype) %>% select(clone) %>% summarise(CR_levle = n_distinct(clone))
rand_df %>% group_by(group, rep_id, clonotype) %>% select(clone) %>% summarise(CR_levle = n_distinct())
rand_df %>% group_by(group, rep_id, clonotype) %>% select(clone) %>% summarise(CR_levle = n_distinct(clone))
rand_df %>% group_by(group, rep_id, clonotype) %>% select(clone) %>% summarise(CR_levle = n_distinct(clone)) %>%
filter(clonotype =="A")
rand_df %>% group_by(group, clonotype, rep_id) %>% select(clone) %>%
summarise(CR_levle = n_distinct(clone), .groups = "drop_last") %>%
filter(clonotype =="A")
rand_df %>% group_by(clonotype, group) %>% select(clone) %>%
summarise(CR_levle = n_distinct(rep_id, clone)) %>%
filter(clonotype =="A")
rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(CR_levle = n_distinct(rep_id, clone)) %>%
filter(clonotype =="A")
rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(CR_levle = n_distinct(rep_id), CR_levle2 = n_distinct(clone)) %>%
filter(clonotype =="A")
rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(CR_levle = n_distinct(rep_id), CR_levle2 = n_distinct(rep_id, clone)) %>%
filter(clonotype =="A")
unique(rand_df$group)
rand_df %>% distinct(group, rep_id)
rand_df %>% distinct(group, rep_id) %>% group_by(group) %>% summarise(n=n_distinct(rep_id))
rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id), CR_levle = n_distinct(rep_id, clone)) %>%
filter(clonotype =="A")
rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id), CR_levle = n_distinct(rep_id, clone) / Share_level) %>%
filter(clonotype =="A")
rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id), total_CR_levle = n_distinct(rep_id, clone), average_CR_levle = n_distinct(rep_id, clone) / Share_level) %>%
filter(clonotype =="A")
groups_tbl <- rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id),
total_CR_levle = n_distinct(rep_id, clone),
averaged_CR_levle = n_distinct(rep_id, clone) / Share_level) %>%
filter(clonotype =="A") %>%
rand_df[rand_df$clonotype=="A",]
groups_tbl <- rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id),
total_CR_levle = n_distinct(rep_id, clone),
averaged_CR_levle = n_distinct(rep_id, clone) / Share_level) %>%
filter(clonotype =="A")
groups_tbl
groups_tbl <- rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id),
total_CR_levle = n_distinct(rep_id, clone),
averaged_CR_levle = n_distinct(rep_id, clone) / Share_level) %>%
filter(clonotype %in% c("A", "K", "D", "F"))
groups_tbl
us_rent_income
spec1 <- us_rent_income %>%
build_wider_spec(names_from = variable, values_from = c(estimate, moe))
spec1
us_rent_income %>%
pivot_wider_spec(spec1)
groups_tbl
us_rent_income %>%
pivot_wider_spec(spec1)
# Is equivalent to
us_rent_income %>%
pivot_wider(names_from = variable, values_from = c(estimate, moe))
spec2 <- tibble(
.name = c("income", "rent", "income_moe", "rent_moe"),
.value = c("estimate", "estimate", "moe", "moe"),
variable = c("income", "rent", "income", "rent")
)
spec2
us_rent_income %>%
pivot_wider_spec(spec2)
groups_tbl
groups_tbl %>% names()
groups_tbl[c("clonotype","group","Share_level")]
as.list(groups_tbl[c("clonotype","group","Share_level")])
tibble::tibble(c("clonotype","group","Share_level"), as.list(groups_tbl[c("clonotype","group","Share_level")]))
tibble::tibble(c("clonotype","group","Share_level"),
as.list(groups_tbl[c("clonotype","group","Share_level")])) %>%
pivot_wider_spec()
tibble::tibble(c("clonotype","group","Share_level"),
as.list(groups_tbl[c("clonotype","group","Share_level")])) %>%
pivot_wider_spec(data = groups_tbl)
us_rent_income %>%
pivot_wider_spec(spec2)
us_rent_income
pivot_wider_spec(spec2)
spec2
tibble::tibble(c(".name",".value","Share_level"),
as.list(groups_tbl[c("clonotype","group","Share_level")])) %>%
pivot_wider_spec(data = groups_tbl)
tibble::tibble(c(".name",".value","Share_level"),
as.list(groups_tbl[c("clonotype","group","Share_level")])) %>%
pivot_wider_spec(data = groups_tbl)
tibble::tibble(c(".name",".value","Share_level"),
as.list(groups_tbl[c("clonotype","group","Share_level")]))
groups_tbl
tibble::tibble(c(".name",".value","Share_level"),
as.list(groups_tbl[c("clonotype","group","Share_level")]))
as.list(groups_tbl[c("clonotype","group","Share_level")])
# tibble::tibble(c(".name",".value","Share_level"),
#                )
as.list(groups_tbl[c("clonotype","group","Share_level")])
groups_tbl[c("clonotype","group","Share_level")]
# tibble::tibble(c(".name",".value","Share_level"),
#               )
groups_tbl[c("clonotype","group","Share_level")]
# tibble::tibble(c(".name",".value","Share_level"),
#               )
groups_tbl[c("clonotype","group","Share_level")] %>% as_tibble()
# tibble::tibble(c(".name",".value","Share_level"),
#               )
groups_tbl[c("clonotype","group","Share_level")]
# tibble::tibble(c(".name",".value","Share_level"),
#               )
tribble(groups_tbl[c("clonotype","group","Share_level")])
# tibble::tibble(c(".name",".value","Share_level"),
#               )
tibble(groups_tbl[c("clonotype","group","Share_level")])
# tibble::tibble(c(".name",".value","Share_level"),
#               )
tibble(groups_tbl[c("clonotype","group","Share_level")]) %>%
unnest_wider(col = group)
# tibble::tibble(c(".name",".value","Share_level"),
#               )
tibble(groups_tbl[c("clonotype","group","Share_level")]) %>%
unnest_wider(col = c(group, Share_level))
# tibble::tibble(c(".name",".value","Share_level"),
#               )
tibble(groups_tbl[c("clonotype","group","Share_level")]) %>%
unnest_wider(col = c("group", "Share_level"))
groups_tbl <- rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id),
total_CR_levle = n_distinct(rep_id, clone),
averaged_CR_levle = n_distinct(rep_id, clone) / Share_level) %>%
filter(clonotype %in% c("A", "K", "D", "F"))
groups_tbl
pivot_wider(groups_tbl, id_cols = "group", values_from = "Share_level")
pivot_wider(groups_tbl, id_cols = group, values_from = Share_level)
groups_tbl
pivot_wider(groups_tbl, id_cols = "group", values_from = "Share_level")
pivot_wider(groups_tbl, id_cols = "clonotype", names_from ="group" , values_from = "Share_level")
head(rand_df)
share_f1 <- function(x,y) {
n_distinct(x, y) / n_distinct(x)
}
groups_tbl <- rand_df %>% group_by(clonotype, group) %>% select(rep_id, clone) %>%
summarise(Share_level = n_distinct(rep_id),
total_CR_levle = n_distinct(rep_id, clone),
share_levle2 = share_f1(rep_id, clone),
averaged_CR_levle = n_distinct(rep_id, clone) / Share_level) %>%
filter(clonotype %in% c("A", "K", "D", "F"))
groups_tbl
f <- share_f1
rand_df %>% group_by(clonotype, group) %>%
select(rep_id, clone) %>%
summarise(Share_level = f(rep_id, clone))
rand_df %>% group_by(clonotype, group) %>%
# select(rep_id, clone) %>%
summarise(Share_level = f(rep_id, clone))
rand_df %>%
group_by(clonotype, group) %>%
# select(rep_id, clone) %>%
summarise(Share_level = f(rep_id, clone), .groups = "drop")
rand_df
rand_df %>%
group_by(clonotype, group) %>%
# select(rep_id, clone) %>%
summarise(Share_level = f(rep_id, clone), .groups = "drop")
rand_df %>%
group_by(clonotype, group) %>%
# select(rep_id, clone) %>%
summarise(Share_level = f(rep_id, clone), .groups = "drop") %>% as.data.frame()
share_level <- function(df, gid, rid, clone, clonotype) {
f <- share_f1
df %>%
group_by(clonotype, gid) %>%
summarise(share = f(rid, clone), .groups = "drop") %>%
as.data.frame()
}
rand_df(rand_df, "group", "rep_id", "clone", "clonotype")
share_level(rand_df, "group", "rep_id", "clone", "clonotype")
share_level <- function(df, gid, rid, clone, clonotype) {
f <- share_f1
df %>%
group_by(all_of(clonotype, gid))
# %>%
#
#   summarise(share = f(rid, clone), .groups = "drop") %>%
#
#   as.data.frame()
}
share_level(rand_df, "group", "rep_id", "clone", "clonotype")
share_level <- function(df, gid, rid, clone, clonotype) {
f <- share_f1
vars(gid, rid)
# df %>%
#
#   group_by(all_of(clonotype, gid))
# %>%
#
#   summarise(share = f(rid, clone), .groups = "drop") %>%
#
#   as.data.frame()
}
share_level(rand_df, "group", "rep_id", "clone", "clonotype")
share_level <- function(df, gid, rid, clone, clonotype) {
f <- share_f1
df %>%
group_by(all_of(vars(gid, rid)))
# %>%
#
#   summarise(share = f(rid, clone), .groups = "drop") %>%
#
#   as.data.frame()
}
share_level(rand_df, "group", "rep_id", "clone", "clonotype")
share_level <- function(df, gid, rid, clone, clonotype) {
f <- share_f1
df %>%
group_by(vars(gid, rid))
# %>%
#
#   summarise(share = f(rid, clone), .groups = "drop") %>%
#
#   as.data.frame()
}
share_level(rand_df, "group", "rep_id", "clone", "clonotype")
share_level <- function(df, gid, rid, clone, clonotype) {
f <- share_f1
unique_by <- dplyr::vars(c(clonotype, gid))
# vars(c(gid, rid))
# df %>%
group_by(df, all_of(unique_by))
# %>%
#
#   summarise(share = f(rid, clone), .groups = "drop") %>%
#
#   as.data.frame()
}
share_level(rand_df, "group", "rep_id", "clone", "clonotype")
detach("package:dplyr", unload = TRUE)
library(dplyr)
